m4 <- m3[,c(5,1:4)]
str(m4)
dcast(m4, periodo ~ muertes, sum)
dcast(m4, periodo ~ grupo, sum)
dcast(m4, grupo ~ periodo, sum)
barplot(dcast(m4, grupo ~ periodo, sum))
acast(m4, grupo ~ periodo, sum)
dim(acast(m4, grupo ~ periodo, sum))
dim(dcast(m4, grupo ~ periodo, sum))
row.names(acast(m4, grupo ~ periodo, sum))
row.names(dcast(m4, grupo ~ periodo, sum))
class(acast(m4, grupo ~ periodo, sum))
barplot(acast(m4, grupo ~ periodo, sum))
barplot(acast(m4, periodo ~ grupo, sum))
barplot(acast(m4, periodo ~ grupo, sum), legend.text = T)
barplot(acast(m4, grupo + periodo, sum), legend.text = T)
barplot(acast(m4, grupo ~ periodo, sum), legend.text = T)
barplot(acast(m4, grupo ~ periodo, sum), legend.text = T, beside = T)
barplot(acast(m4, grupo ~ periodo, sum), legend.text = T, beside = T, col = "green")
barplot(acast(m4, grupo ~ periodo, sum), legend.text = T, beside = T)
barplot(acast(m4, periodo ~ grupo, sum), legend.text = T, beside = T)
acast(m4, grupo, sum)
acast(m4, grupo, sum)
acast(m4, m4$grupo, sum)
acast(m4, grupo, sum)
tapply(m4$muertes, m4$grupo, sum)
pie(tapply(m4$muertes, m4$grupo, sum))
pie(tapply(m4$muertes, m4$grupo, sum/ sum(m4$muertes))
)
pie(tapply(m4$muertes, m4$grupo, function(x) {sum(x)/sum(m4$muertes)})
)
tapply(m4$muertes, m4$grupo, function(x) {sum(x)/sum(m4$muertes)})
barplot(acast(m4, periodo ~ grupo, sum), legend.text = T, beside = T)
barplot(acast(m4, periodo ~ grupo, sum), legend.text = T, beside = T)
acast(m4, periodo ~ grupo, sum)
acast(m4, grupo ~ periodo, sum)
dcast(m4, grupo ~ periodo, sum)
dcast(m4, grupo, function(x) {sum(x)/ sum(m4$muertes)}
)
dcast(m4, grupo ~, function(x) {sum(x)/ sum(m4$muertes)}
dcast(m4, grupo ~., function(x) {sum(x)/ sum(m4$muertes)}
)
dcast(m4, grupo ~., function(x) {sum(x)/ sum(m4$muertes)})
dcast(m4, grupo ~., function(x) {sum(x)/ sum(m4$muertes)*100})
dcast(m4, grupo ~., round(function(x) {sum(x)/ sum(m4$muertes)*100}, 1))
dcast(m4, grupo ~., function(x) {round(sum(x)/ sum(m4$muertes)*100, 1)})
acast(m4, grupo ~., function(x) {round(sum(x)/ sum(m4$muertes)*100, 1)})
por_grupos <-acast(m4, grupo ~., function(x) {round(sum(x)/ sum(m4$muertes)*100, 1)})
order(por_grupos)
por_grupos[order(por_grupos),]
por_grupos <-dcast(m4, grupo ~., function(x) {round(sum(x)/ sum(m4$muertes)*100, 1)})
por_grupos[order(por_grupos),]
por_grupos[order(por_grupos$.),]
por_grupos[order(por_grupos$.), decreasing = T]
por_grupos[order(por_grupos$.), decreasing = T]
por_grupos[order(por_grupos$., decreasing = T), ]
por_grupos <-dcast(m4, grupo ~., "%" = function(x) {round(sum(x)/ sum(m4$muertes)*100, 1)})
por_grupos <-dcast(m4, grupo ~., function(x) {round(sum(x)/ sum(m4$muertes)*100, 1)} = "%")
por_grupos <-dcast(m4, grupo ~., function(x) {round(sum(x)/ sum(m4$muertes)*100, 1)})
names(airquality) <- tolower(names(airquality))
aqm <- melt(airquality, id=c("month", "day"), na.rm=TRUE)
acast(aqm, day ~ month ~ variable)
por_grupos <-dcast(m4, grupo ~., "%" = function(x) {round(sum(x)/ sum(m4$muertes)*100, 1)})
por_grupos <-dcast(m4, grupo ~.,function(x) {round(sum(x)/ sum(m4$muertes)*100, 1)})
barplot(acast(m4, periodo ~ grupo, sum), legend.text = T, beside = T)
por_grupos[order(por_grupos$., decreasing = T), ]
m3 <- melt(m2, id = c("Causas", "periodo")) #creamos la variable provincia coloca
names(m3) <- c("causas", "periodo", "provincia", "muertes")
names(m3)
m3$grupo <- as.factor(as.character(substr(m3$causas, 1, 1))) #extrae el primer numero
m3$causas <- as.factor(substr(m3$causas, 6, 100)) #extre solo el texto de la columna
table(m3$grupo)
head(m3)
sum(m3$muertes[m3$grupo ==0, ])
sum(m3$muertes[m3$grupo ==0])
m2<- m[c(-linea), -(columna)] #eliminamos de la base de datos las lineas y columnas con "total"
m2$Causas <- as.factor(as.character(m2$Causas))
m2$grupo <- as.factor(as.character(substr(m2$causas, 1, 1))) #extrae el primer numero
m2$grupo <- as.factor(as.character(substr(m2$Causas, 1, 1))) #extrae el primer numero
table(m2$grupo)
m2$Causas <- as.factor(substr(m2$Causas, 6, 100)) #extrae solo el texto de la columna
m2$provincia <- as.factor(gsub("\\.", " ", m2$provincia)) #quitando los puntos de los nombres de las provincias
m3 <- melt(m2, id = c("Causas", "periodo")) #creamos la variable provincia coloca
levels(m2$grupo)
levels(m2$grupo) <- c("Mal definidos", "Infección/Parásito", "Tumores/Cáncer", "Sis. Circulatorio", "Perinatal", "Muertes Violentas", "Otros" )
table(m2$grupo)
m3 <- melt(m2, id = c("Causas", "periodo")) #creamos la variable provincia coloca
names(m3) <- c("causas", "periodo", "provincia", "muertes")
m3 <- melt(m2, id = c("Causas", "periodo")) #creamos la variable provincia coloca
names(m3)
names(m3) <- c("causas", "periodo", "provincia", "muertes")
names(m3)
head(m3)
m3$provincia <- as.factor(gsub("\\.", " ", m2$provincia)) #quitando los puntos de los nombres de las provincias
m3$provincia <- as.factor(gsub("\\.", " ", m2$provincia)) #quitando los puntos de los nombres de las provincias
m3$provincia <- as.factor(gsub("\\.", " ", m3$provincia)) #quitando los puntos de los nombres de las provincias
head(m3)
names(m2)
m3 <- melt(m2, id = c("Causas", "periodo, "grupo")) #creamos la variable provincia coloca
m3 <- melt(m2, id = c("Causas", "periodo", "grupo")) #creamos la variable provincia coloca
head(m3)
m2$grupo <- as.factor(as.character(substr(m2$Causas, 1, 1))) #extrae el primer numero
m2$Causas <- as.factor(substr(m2$Causas, 6, 100)) #extrae solo el texto de la columna
levels(m2$grupo) <- c("Mal definidos", "Infección/Parásito", "Tumores/Cáncer", "Sis. Circulatorio", "Perinatal", "Muertes Violentas", "Otros")
levels(m2$grupo)
url2011 <- "https://github.com/Pedromoisescamacho/Principales-causas-de-muerte-Republica-Domincana/raw/master/Mortalidad%20Por%20Provincia%202011.csv"
url2012 <- "https://raw.githubusercontent.com/Pedromoisescamacho/Principales-causas-de-muerte-Republica-Domincana/master/Mortalidad%20Por%20Provincia%202012.csv"
muerte1 <- read.csv(url2011, header = T, nrows = 69) #luego de la linea 70 la tabla contiene informaciones generales que no vienen al caso
muerte2 <- read.csv(url2012, header = T, nrows = 69) #luego de la linea 70 la tabla contiene informaciones generales que no vienen al caso
muerte1$periodo <- as.factor("2011")
muerte2$periodo <- as.factor("2012")
m       <- rbind(muerte1, muerte2)
linea <- grep("total", m$Causas,ignore.case = T) #buscamos las lineas que tiene "total"
columna <- grep("total", names(m), ignore.case = T) #buscamos las columnas con nombre "total"
m2<- m[c(-linea), -(columna)] #eliminamos de la base de datos las lineas y columnas con "total"
m2$Causas <- as.factor(as.character(m2$Causas)) #eliminamos el factor total que todavia se encontraba
head(m2)
str(m2)
m2$grupo <- as.factor(as.character(substr(m2$Causas, 1, 1))) #extrae el primer numero
levels(m2$grupo)
m2$Causas <- as.factor(substr(m2$Causas, 6, 100)) #extrae solo el texto de la columna
levels(m2$grupo) <- c("Mal definidos", "Infección/Parásito", "Tumores/Cáncer", "Sis. Circulatorio", "Perinatal", "Muertes Violentas", "Otros")
library(reshape2) #cargamos el paquete que utilizaremos para agregar
m3 <- melt(m2, id = c("Causas", "periodo", "grupo")) #creamos la variable provincia coloca
names(m3) <- c("causas", "periodo", "provincia", "muertes")
m3$provincia <- as.factor(gsub("\\.", " ", m2$provincia)) #quitando los puntos de los nombres de las provincias
head(m3)
m3$provincia <- as.factor(gsub("\\.", " ", m2$provincia)) #quitando los puntos de los nombres de las provincias
m3$provincia <- as.factor(gsub("\\.", " ", m3$provincia)) #quitando los puntos de los nombres de las provincias
m4 <- m3[,c(5,1:4)] #reorganizando las columnas de la tabla
head(m4)
m3$provincia <- as.factor(gsub("\\.", " ", m3$provincia)) #quitando los puntos de los nombres de las provincias
head(m3)
m3$provincia <- as.factor(gsub("\\.", " ", m3$provincia)) #quitando los puntos de los nombres de las provincias
m3
m3
head(m3)
prueba <- head(m3$provincia)
prueba
head(m2)
m3 <- melt(m2, id = c("Causas", "periodo", "grupo")) #creamos la variable provincia coloca
head(m3)
names(m3) <- c("causas", "periodo","grupo", "provincia", "muertes")
m3$provincia <- as.factor(gsub("\\.", " ", m3$provincia)) #quitando los puntos de los nombres de las provincias
m4 <- m3[,c(5,1:4)] #reorganizando las columnas de la tabla
names(m3)
por_grupos <-dcast(m3, grupo ~.,function(x) {round(sum(x)/ sum(m3$muertes)*100, 1)})
por_grupos
dcast(m3, grupo ~.,sum)
por_grupos <-dcast(m3, grupo ~.,function(x) {round(sum(x)/ sum(m3$muertes)*100, 1)})
por_grupos <-dcast(m3, grupo ~ periodo,function(x) {round(sum(x)/ sum(m3$muertes)*100, 1)})
por_grupos
dcast(m3, grupo ~ periodo,sum)
por_grupos <-dcast(m3, grupo ~.,function(x) {round(sum(x)/ sum(m3$muertes)*100, 1)})
por_grupos
por_grupos <- por_grupos[order(por_grupos$., decreasing = T), ]
por_grupos
por_grupos[order(por_grupos$., decreasing = T), ]
por_grupos <-dcast(m3, grupo ~periodo,function(x) {round(sum(x)/ sum(m3$muertes)*100, 1)})
por_grupos[order(por_grupos$., decreasing = T), ]
por_grupos[order(por_grupos$`2012`, decreasing = T), ]
por_grupos <-dcast(m3, grupo ~periodo, sum)
por_grupos
por_grupos[order(por_grupos$., decreasing = T), ]
por_grupos[order(por_grupos$`2012`, decreasing = T), ]
por_grupos2 <- transform(por_grupos, 2011 = '2011'/sum('2011'))
por_grupos2 <- transform(por_grupos, "2011" = '2011'/sum('2011'))
por_grupos2 <- transform(por_grupos, "2011" = `2011`/sum(`2011`))
por_grupos2
por_grupos2 <- transform(por_grupos, 2011 = round(`2011`/sum(`2011`),1)
por_grupos2 <- transform(por_grupos, '2011' = round(`2011`/sum(`2011`),1)
)
por_grupos2
por_grupos2 <- transform(por_grupos, round(`2011`/sum(`2011`)*100,1))
por_grupos2
por_grupos2 <- transform(por_grupos, x2012 = round(`2011`/sum(`2011`)*100,1))
por_grupos2
por_grupos2 <- transform(por_grupos, "2011" = round(`2011`/sum(`2011`)*100,1))
por_grupos2
por_grupos <- por_grupos[order(por_grupos$`2012`, decreasing = T), ]
por_grupos2 <- transform(por_grupos, "2011" = round(`2011`/sum(`2011`)*100,1), "2012" = round(`2012`/sum(`2012`)*100,1))
por_grupos2
names(por_grupos2) <- c("grupo", "2011", "2012")
por_grupos2
names(por_grupos2) <- c("grupo", "2011", "2012")
barplot(acast(m3, periodo ~ grupo, sum), legend.text = T, beside = T)
barplot(acast(m3, periodo ~ grupo, sum), legend.text = T, beside = T, horiz = T)
barplot(acast(m3, periodo ~ grupo, sum), legend.text = T, beside = T)
por_grupos <-dcast(m3[m3$provincia == "Distrito Nacional",], grupo ~periodo, sum)
levels(m3$provincia)
lavega <- subset(m3, provincia == "La vega")
table(m3$provincia)
table(lavega$provincia)
dcast(lavega, grupo ~periodo, sum)
x <- dcast(lavega, grupo ~periodo, sum)
y <- x[order(x$`2012`, decreasing = T), ]
z <- transform(y, "2011" = round(`2011`/sum(`2011`)*100,1), "2012" = round(`2012`/sum(`2012`)*100,1))
z
write.xlsx(m3, "c:/causamuerte.xlsx")
library(xlsx)
write.xlsx(m3, "c:/causamuerte.xlsx")
write.csv(m3, "c:/causamuerte.xlsx")
write.csv(m3, "//causamuerte.csv")
write.csv(m3, "./causamuerte.csv")
getwd()
library(swirl)
swirl()
swirl()
?Installcourses
??Installcourses
install_course("Statistical_Inference")
swirl()
33/36
deck
52
13/52
4/52
0
12/52
2/51
0.8*1.6/2
0.64/1
mypdf
integrate(mypdf, lower = 0, upper = 1.6)
1/4
2
2^1/2
2^(1/2)
.997*0.001
(1-0.997)*(1-0.001)
(1-.985)*(1-0.001)
997*0.001/(1-.985)*(1-0.001)
(.997*0.001)/(1-.985)*(1-.001)
.997*0.001/.997*0.001+(1-.985)*(1-.001)
.997*0.001/.997*0.001+((1-.985)*(1-.001))
.997*0.001/(.997*0.001)+((1-.985)*(1-.001))
(.997*.001) by (.997*.001 + .015*.999)
(.997*.001)/ (.997*.001 + .015*.999)
21/6
expect_dice()
expect_dice
dice_fair
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
sum(X_hi+ X_lo)/12
sum(dice_low+ dice_high)/12
.5*(edh+edl)
integrate(myfunc, 0 , 2)
spop
mean(spop)
allsam
apply(allsam, 1, mean)
smeans
mean(smeans)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
temp1 <- temp[1,]
temp2 <- temp[2,]
temp1 * temp2
mean(temp1 * temp2)
mean(temp1) * mean(temp2)
mean(temp1)
sum(temp1* temp2)
rm(list= ls()
)
head(sleep)
table(sleep$group)
dim(sleep)
str(sleep)
library(reshape2)
head(ChickWeight)
dcast(ChickWeight, Chick + Diet ~ Time, value.var = "Weight")
dcast(ChickWeight, Chick + Diet ~ Time, value.var = "Weight")
data("ChickWeight")
dcast(ChickWeight, Chick + Diet ~ Time, value.var = "Weight")
dcast(ChickWeight, Chick + Diet ~ Time, value.var = "Weight")
dcast(ChickWeight, Diet + Chick ~ Time, value.var = "Weight")
dcast(ChickWeight, Diet + Chick ~ Time)
head(chickwts)
head(ChickWeight)
dcast(ChickWeight, Diet + Chick ~ Time, Weight)
dcast(ChickWeight, Diet + Chick ~ Time, value.var = Weight)
dcast(ChickWeight, Diet + Chick ~ Time, value.var = "Weight")
dcast(ChickWeight, Diet + Chick ~ Time, value.var = ChickWeight$weight)
library(ggplot2); library(manipulate)
install.packages("manipulate")
library(ggplot2); library(manipulate)
k <- 1000
xvals <- seq(-5, 5, length = k)
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist))
g
}
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
k <- 1000
xvals <- seq(-5, 5, length = k)
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist))
g
}
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
manipulate(myplot2(df), df = slider(1, 20, step = 1))
library(ggplot2)
g <- ggplot(sleep, aes(x = group, y = extra, group = factor(ID)))
g <- g + geom_line(size = 1, aes(colour = ID)) + geom_point(size =10, pch = 21, fill = "salmon", alpha = .5)
g
library(datasets); data(ChickWeight); library(reshape2)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
wideCW
names(wideCW)
[-(1:2)]
-(1:2)
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
names(wideCW)
library(dplyr)
g <- ggplot(ChickWeight, aes(x = Time, y = weight,
colour = Diet, group = Chick))
g <- g + geom_line()
g <- g + stat_summary(aes(group = 1), geom = "line", fun.y = mean, size = 1, col = "black")
g <- g + facet_grid(. ~ Diet)
g
g <- ggplot(ChickWeight, aes(x = Time, y = weight,
colour = Diet)
g <- g + geom_line()
g <- ggplot(ChickWeight, aes(x = Time, y = weight,
colour = Diet))
g <- g + geom_line()
g <- g + stat_summary(aes(group = 1), geom = "line", fun.y = mean, size = 1, col = "black")
g <- g + facet_grid(. ~ Diet)
g
g <- ggplot(ChickWeight, aes(x = Time, y = weight,
colour = Diet))
g <- g + geom_line()
g
g <- ggplot(wideCW, aes(x = factor(Diet), y = gain, fill = factor(Diet)))
g
g <- g + geom_violin(col = "black", size = 2)
g
g <- ggplot(wideCW, aes(x = factor(Diet), y = gain, fill = factor(Diet)))
g <- g + geom_violin(col = "black", size = 2)
g
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
rexp(10,.2)
rexp(50,.2)
n <- 40
rep <- 1000
matrix(rexp(n*rep, .2), rep,n)
sim <- matrix(rexp(n*rep, .2), rep,n)
str(sim)
head(sim)
summary(sim)
str(sim)
class(sim)
sapply(sim,1,mean)
apply(sim,1,mean)
sim <- apply(matrix(rexp(n*rep, .2), rep,n), 1, mean)
dim(sim)
length(dim)
sim
hist(sim)
hist(apply(matrix(rexp(n*rep, .2), rep,n), 1, mean))
rm(list = ls())
n<- 40
rep <- 1000
hist(apply(matrix(rexp(n*rep, .2), rep,n), 1, mean))
hist(apply(matrix(rexp(n*rep, .2), rep,n), 1, mean))
n <-
10
hist(apply(matrix(rexp(n*rep, .2), rep,n), 1, mean))
n<- 100
hist(apply(matrix(rexp(n*rep, .2), rep,n), 1, mean))
n<- 1000
hist(apply(matrix(rexp(n*rep, .2), rep,n), 1, mean))
n<- 100000
hist(apply(matrix(rexp(n*rep, .2), rep,n), 1, mean))
1/.2
hist(apply(matrix(rexp(40*1000, .2), 1000,40), 1, mean))
hist(apply(matrix(rexp(40*1000, .2), 1000,40), 1, mean))
hist(apply(matrix(rexp(40*1000, .2), 1000,40), 1, mean))
knitr::opts_chunk$set(echo = TRUE)
n <- 40 ; rep <- 1000 #setting the amount of simulation that we will do.
sim <- matrix(rexp(n * rep, .2), rep,n) #doing the simulations and putting it on a matrix with dim = 1000 X 40
means <- apply(sim, 1, mean) #obtaining the means of all 1000 lines on the matrix
hist(means, main = "Distribution of the means for 1000 samples of 40 random exponational variables", xlab = "")
n <- 40 ; rep <- 1000 #setting the amount of simulation that we will do.
sim <- matrix(rexp(n * rep, .2), rep,n) #doing the simulations and putting it on a matrix with dim = 1000 X 40
means <- apply(sim, 1, mean) #obtaining the means of all 1000 lines on the matrix
hist(means, main = "Distribution of the means for 1000 samples of 40 random exponational variables", xlab = "")
hist(means, main = "Distribution of the means for 1000 samples of 40 random exponational variables", xlab = "")
hist(means, main = "Distribution of the means for 1000 /nsamples of 40 random exponational variables", xlab = "")
hist(means, main = "Distribution of the means for 1000 /nsamples of 40 random exponational variables", xlab = "")
hist(means, main = "Distribution of the means for 1000 \nsamples of 40 random exponational variables", xlab = "")
hist(means, main = "Distribution of the means for 1000 /nsamples of 40 random exponential variables", xlab = "")
hist(means, main = "Distribution of the means for 1000 /nsamples of 40 random exponential variables", xlab = "")
hist(means, main = "Distribution of the means for 1000 \nsamples of 40 random exponential variables", xlab = "")
hist(means, main = "Distribution of the means for 1000 \nsamples of 40 random exponential variables", xlab = "")
line(5)
line(x = 5)
abline(5)
abline(v=5)
abline(v=5, col = "green")
abline(v=5, col = "red")
abline(v=5, col = "red", lty = 2 )
hist(means, main = "Distribution of the means for 1000 \nsamples of 40 random exponential variables", xlab = "")
abline(v=5, col = "red", lty = 2 )
hist(means, main = "Distribution of the means for 1000 \nsamples of 40 random exponential variables", xlab = "")
abline(v=5, col = "red", lty = 2 , lwd = 2)
text(5.5,250,"expected mean 5")
text(6,250,"expected mean 5")
hist(means, main = "Distribution of the means for 1000 \nsamples of 40 random exponential variables", xlab = "")
text(6,250,"expected mean 5")
legend("topright", "(x,y)")
hist(means, main = "Distribution of the means for 1000 \nsamples of 40 random exponential variables", xlab = "")
legend("topright")
legend("topright", c("expected mean", "mean"), lty = c(2,2), lwd = c(2,2), col = ("red", "green"))
hist(means, main = "Distribution of the means for 1000 \nsamples of 40 random exponential variables", xlab = "")
legend("topright", c("expected mean", "mean"), lty = c(2,2), lwd = c(2,2), col = ("red", "green"))
legend("topright", c("expected mean", "mean"), lty = c(2,2), lwd = c(2,2), col = c("red", "green"))
n <- 40 ; rep <- 1000 #setting the amount of simulation that we will do.
sim <- matrix(rexp(n * rep, .2), rep,n) #doing the simulations and putting it on a matrix with dim = 1000 X 40
means <- apply(sim, 1, mean) #obtaining the means of all 1000 lines on the matrix
hist(means, main = "Distribution of the means for 1000 \nsamples of 40 random exponential variables", xlab = "")
abline(v=5, col = "red", lty = 2 , lwd = 2)
legend("topright", c("expected mean", "mean"), lty = c(2,2), lwd = c(2,2), col = c("red", "green"))
n <- 40 ; rep <- 1000 #setting the amount of simulation that we will do.
sim <- matrix(rexp(n * rep, .2), rep,n) #doing the simulations and putting it on a matrix with dim = 1000 X 40
means <- apply(sim, 1, mean) #obtaining the means of all 1000 lines on the matrix
hist(means, main = "Distribution of the means for 1000 \nsamples of 40 random exponential variables", xlab = "")
abline(v=5, col = "red", lty = 2 , lwd = 2) #adding line of expeted mean
abline(v = mean(means), col = "green", lty = 2, lwd = 2)
legend("topright", c("expected mean", "mean"), lty = c(2,2), lwd = c(2,2), col = c("red", "green"))
mean(means)
t.test(means)
sd(means)
var(means)
sqrt(var(means))
sd(sim)
mean(sim)
str(sim)
summary(sim)
summary(rexp(n * rep, .2)
)
t.test(means)
t.test(rexp(n * rep, .2))
t.test(means, mu = 5
)
set.seed(42)
n <- 40 ; rep <- 1000 #setting the amount of simulation that we will do.
sim <- matrix(rexp(n * rep, .2), rep,n) #doing the simulations and putting it on a matrix with dim = 1000 X 40
means <- apply(sim, 1, mean) #obtaining the means of all 1000 lines on the matrix
hist(means, main = "Distribution of the means for 1000 \nsamples of 40 random exponential variables", xlab = "")
abline(v=5, col = "red", lty = 2 , lwd = 2) #adding line of expeted mean
abline(v = mean(means), col = "green", lty = 2, lwd = 2)
legend("topright", c("expected mean", "mean"), lty = c(2,2), lwd = c(2,2), col = c("red", "green"))
t.test(means, mu = 5)
t.test(means, mu = 5)
str(ToothGrowth)
summary(ToothGrowth)
oj <- ToothGrowth$len[ToothGrowth$supp = "OJ"]
oj <- ToothGrowth$len[ToothGrowth$supp = "OJ",]
oj <- ToothGrowth$len[ToothGrowth$supp == "OJ",]
oj <- ToothGrowth$len[ToothGrowth$supp == "OJ"]
vc <- ToothGrowth$len[ToothGrowth$supp == "VC"]
t.test(oj - vc)
table(ToothGrowth$dose)
table(ToothGrowth)
t.test(oj - vc, conf.level = 0.99)
setwd("C:/Users/pedro moises/Documents/R/project/ruido")
setwd("C:/Users/pedro moises/Documents/R/project/ruido")
library(jsonlite)
library(lubridate)
library(dplyr)
library(ggplot2)
n <- lapply(list.files(pattern = "json"), function(x) {fromJSON(x)[[1]][3:5]}) #leyendo todos los archivos disponibles
noi <- do.call(rbind, n) #uniendo todo en una sola DB
noi$db <- as.numeric(noi$db)
noi$date <- ymd_hms(noi$date, tz = "America/Caracas")
dim(noi)
noi$time <- as.POSIXct(strftime(noi$date, format="%H:%M"), format="%H:%M")
no1 <- noi %>% group_by(min) %>% summarise(mean = mean(db), max = max(db), mini = min(db), median = median(db)) %>% arrange(desc(median))
ggplot(no1, aes(min)) +
geom_line(aes(y = mean, color = "Mean"))+
geom_line(aes(y = max, color = "Max"))+
geom_line(aes(y = mini, color = "Minimum"))
no1 <- noi %>% group_by(min) %>% summarise(mean = mean(db), max = max(db), mini = min(db), median = median(db)) %>% arrange(desc(median))
ggplot(no1, aes(min)) +
geom_line(aes(y = mean, color = "Mean"))+
geom_line(aes(y = max, color = "Max"))+
geom_line(aes(y = mini, color = "Minimum"))
no1 <- noi %>% group_by(min) %>% summarise(mean = mean(db), max = max(db), mini = min(db), median = median(db)) %>% arrange(desc(median))
no1 <- noi %>% group_by(min) %>% summarise(mean = mean(db), max = max(db), mini = min(db), median = median(db)) %>% arrange(desc(median))
noi$min <- floor_date(noi$time, unit = "15 mins")
no1 <- noi %>% group_by(min) %>% summarise(mean = mean(db), max = max(db), mini = min(db), median = median(db)) %>% arrange(desc(median))
ggplot(no1, aes(min)) +
geom_line(aes(y = mean, color = "Mean"))+
geom_line(aes(y = max, color = "Max"))+
geom_line(aes(y = mini, color = "Minimum"))
